СОДЕРЖАНИЕ
ВВЕДЕНИЕ	3
1 АНАЛИЗ ТРЕБОВАНИЙ К РАЗРАБАТЫВАЕМОЙ СИСТЕМЕ	7
2 ПРОЕКТИРОВАНИЕ СИСТЕМЫ	7
3 РЕАЛИЗАЦИЯ СИСТЕМЫ	9
4 ОПИСАНИЕ ТЕСТИРОВАНИЯ СИСТЕМЫ	9
5  РУКОВОДСТВО ОПЕРАТОРУ	12
       5.1 Общая информация	12
       5.2 Авторизация	12
       5.3 Основной функционал	12
       5.4 Сообщение оператору	12
ЗАКЛЮЧЕНИЕ	31
СПИСОК ИСПОЛЬЗОВАННЫХ ИСТОЧНИКОВ	34



























ВВЕДЕНИЕ
Тема курсового проекта «разработка приложения для управления магазином электроники DNS». Это современный проект,
предназначенный для автоматизации процессов управления магазином электроники. Приложение предоставляет возможность пользователям просматривать каталог товаров, совершать покупки, а администраторам - управлять товарами, категориями и заказами. В современном мире
электронной коммерции такие приложения являются необходимым инструментом для эффективного ведения бизнеса.
Область применения разработки - сфера электронной коммерции и розничной торговли электроникой. Приложение может быть использовано как для небольших магазинов, так и для крупных сетей электроники. Оно должно помочь автоматизировать процессы продаж, управления товарами и обработки заказов, а также улучшить взаимодействие с клиентами.
Для реализации поставленной цели необходимо решить следующие задачи:
1. Изучить предметную область электронной коммерции;
2. Определить состав пользователей и их функционал;
3. Определить входные данные и структурировать их;
4. Создать базу данных для хранения информации о товарах, заказах и пользователях;
5. Разработать интуитивно понятный пользовательский интерфейс;
6. Разработать функционал для управления товарами и заказами;
7. Протестировать приложение для обеспечения его стабильной работы.







1 АНАЛИЗ ТРЕБОВАНИЙ К РАЗРАБАТЫВАЕМОЙ СИСТЕМЕ
Перед началом работы я изучил предметную область проекта и пришел к
выводу что приложение для управления магазином электроники должно отвечать следующим требованиям:
Требование 1: Пользователи должны иметь возможность просматривать каталог товаров и совершать покупки.
Описание прецедента: Пользователь должен иметь возможность зарегистрироваться в приложении, 
просматривать каталог товаров, добавлять товары в корзину и оформлять заказы.
Требование 2: Система должна обеспечивать управление заказами.
Описание прецедента: Администраторы должны иметь возможность просматривать заказы,
изменять их статус и управлять доставкой.
Требование 3: Система должна иметь удобный интерфейс управления товарами.
Описание прецедента: Администраторы должны иметь возможность добавлять,
редактировать и удалять товары, управлять категориями и ценами.
Требование 4: Приложение должно обеспечивать безопасность данных.
Описание прецедента: Система должна защищать персональные данные пользователей
и информацию о заказах.
Также я обратил внимание на необходимый функционал:
1. Регистрация и авторизация:
   a. Регистрация и авторизация через email
   b. Восстановление пароля
   c. Управление профилем
2. Основной функционал:
   a. Каталог товаров:
      i. Просмотр товаров по категориям
      ii. Поиск товаров
      iii. Фильтрация по параметрам
   b. Корзина:
      i. Добавление товаров
      ii. Изменение количества
      iii. Удаление товаров
   c. Заказы:
      i. Оформление заказа
      ii. История заказов
      iii. Статус заказа
3. Функционал администратора:
   a. Управление товарами
   b. Управление категориями
   c. Обработка заказов
   d. Статистика продаж

















2 ПРОЕКТИРОВАНИЕ СИСТЕМЫ
Подробное описание доступных возможностей каждой категории
пользователей приведено в специальной таблице №1, которая предоставляет
обзор функционала и привязывает его к соответствующим ролям и правам.
Таблица 1 - Описание функционала акторов
Актор	Название варианта использования	Описание варианта использования
Администратор	Вход в систему	Может войти в систему используя данные администратора.
	Управление товарами
	Может добавлять, редактировать и удалять товары из каталога. Имеет доступ к управлению ценами и наличием товаров.
	Управление категориями	Может создавать, редактировать и удалять категории товаров, настраивать их иерархию.
	Обработка заказов	Может просматривать все заказы, изменять их статус, управлять доставкой и отменять заказы при необходимости.
	Просмотр статистики	Имеет доступ к статистике продаж, популярным товарам и активности пользователей.
	Управление пользователями	Может просматривать список пользователей, блокировать нарушителей, сбрасывать пароли.
Пользователь	Вход в систему	Может выполнить вход в систему с помощью данных, введённых при регистрации.
	Просмотр каталога	Может просматривать товары, фильтровать по категориям, искать по названию.
	Восстановление пароля	Может восстановить забытый пароль через email.
	Управление корзиной	Может добавлять товары в корзину, изменять количество, удалять товары.
	Оформление заказа	Может создавать заказы, выбирать способ доставки и оплаты.
	История заказов	Может просматривать свои прошлые заказы и их статусы.
	Личный профиль	Может просматривать свой личный профиль.
На основании требований к системе я могу приступить к проектированию системы.

Для того, чтобы иметь наиболее точное представление того, какой функционал должен быть реализован в личных кабинетах каждой из ролей пользователей, мною была создана UML-диаграмма проекта.

 Далее, с помощью текстовых описаний и примеров для объяснения взаимодействия пользователя с приложением, будут описаны результаты проектирования системы.

Описание взаимодействия пользователей с приложением:
Пользователи могут зарегистрироваться в приложении, создав свой профиль. После регистрации пользователи получают доступ к каталогу товаров, где могут просматривать товары по категориям, добавлять их в корзину и оформлять заказы. Система предоставляет возможность отслеживать статус заказов и управлять личным профилем.

Описание состояний пользователей:
Пользователи могут находиться в различных состояниях в процессе использования приложения:
- "Неавторизованный" - имеет доступ только к просмотру каталога
- "Авторизованный" - полный доступ к функционалу покупателя
- "В процессе оформления заказа" - заполнение данных заказа
- "В корзине" - работа с товарами в корзине
- "В профиле" - управление личными данными
- "Администратор" - доступ к панели управления

Проанализировав требования к функциям пользователей, выявлены следующие прецеденты:

№    Актор    Название варианта использования    Формулировка

П1    Администратор    Регистрация в системе    Администратор может зарегистрироваться в системе, указав email, пароль и личные данные.

П2    Администратор    Авторизация в системе    Администратор может войти в систему, используя свои учетные данные.

П3    Администратор    Выход из системы    Администратор может выйти из системы.

П4    Администратор    Просмотр каталога товаров    Администратор может просматривать весь каталог товаров, включая неактивные позиции.

П5    Администратор    Поиск товаров    Администратор может искать товары по различным параметрам.

П6    Администратор    Добавление товара    Администратор может добавлять новые товары, указывая название, описание, цену, категорию и другие характеристики.

П7    Администратор    Редактирование товара    Администратор может изменять информацию о существующих товарах.

П8    Администратор    Управление заказами    Администратор может просматривать и обрабатывать заказы пользователей.

П9    Администратор    Статистика    Администратор может просматривать отчеты о продажах и активности.

П10    Пользователь    Регистрация    Пользователь может создать новый аккаунт в системе.

П11    Пользователь    Авторизация    Пользователь может войти в систему используя email и пароль.

П12    Пользователь    Просмотр товаров    Пользователь может просматривать каталог и фильтровать товары.

П13    Пользователь    Работа с корзиной    Пользователь может добавлять товары в корзину и управлять ею.

П14    Пользователь    Оформление заказа    Пользователь может создать заказ из товаров в корзине.

П15    Пользователь    История заказов    Пользователь может просматривать свои прошлые заказы.

Подробное описание прецедентов:

Прецедент П1: Регистрация в системе (Администратор)
Администратор может зарегистрироваться в системе с правами администратора.

Описание:
- Администратор открывает форму регистрации
- Вводит email, пароль и личные данные
- Система проверяет уникальность email
- При успешной проверке создается учетная запись администратора
- Система отправляет подтверждение на email

Прецедент П2: Авторизация в системе (Администратор)
Администратор может войти в систему с полными правами доступа.

Описание:
- Администратор открывает форму входа
- Вводит email и пароль
- Система проверяет учетные данные
- При успешной проверке открывается панель администратора
- При ошибке выводится сообщение о неверных данных
Прецедент П3: Выход из системы (Администратор) Администратор может выйти из системы.

Описание:
Администратор нажимает кнопку "Выход"
Система завершает сессию администратора
Пользователь перенаправляется на страницу входа
Система подтверждает успешный выход
Прецедент П4: Просмотр каталога товаров (Администратор) Администратор может просматривать весь каталог товаров, включая неактивные позиции.

Описание:
Администратор открывает раздел каталога товаров
Система отображает список всех товаров
Администратор может просматривать информацию о каждом товаре
Администратор может фильтровать и сортировать товары по различным параметрам
Прецедент П5: Поиск товаров (Администратор) Администратор может искать товары по различным параметрам.

Описание:
Администратор вводит параметры поиска в строку поиска
Система выполняет поиск по базе данных
Результаты поиска отображаются на экране
Администратор может выбрать товар из результатов для просмотра или редактирования

Прецедент П7: Редактирование товара (Администратор) Администратор может изменять информацию о существующих товарах.

Описание:
Администратор выбирает товар для редактирования из каталога
Система открывает форму редактирования товара
Администратор вносит изменения в необходимые поля
Система проверяет корректность данных
При успешной проверке обновленная информация сохраняется
Система подтверждает успешное редактирование товара
Прецедент П8: Управление заказами (Администратор) Администратор может просматривать и обрабатывать заказы пользователей.

Описание:
Администратор открывает раздел управления заказами
Система отображает список всех заказов
Администратор может просматривать детали каждого заказа
Администратор может изменять статус заказа (например, "обрабатывается", "доставлен")
Система подтверждает изменения статуса заказа
Прецедент П9: Статистика (Администратор) Администратор может просматривать отчеты о продажах и активности.

Описание:
Администратор открывает раздел статистики
Система генерирует отчеты по продажам, активным пользователям и другим метрикам
Администратор может выбирать временные рамки для отчетов
Система отображает графики и таблицы с данными
Администратор может экспортировать отчеты в различные форматы
Прецедент П10: Регистрация (Пользователь) Пользователь может создать новый аккаунт в системе.

Описание:
Пользователь открывает форму регистрации
Вводит email, пароль и личные данные
Система проверяет уникальность email
При успешной проверке создается учетная запись пользователя
Система отправляет подтверждение на email
Прецедент П11: Авторизация (Пользователь) Пользователь может войти в систему, используя email и пароль.

Описание:
Пользователь открывает форму входа
Вводит email и пароль
Система проверяет учетные данные
При успешной проверке пользователь перенаправляется на главную страницу
При ошибке выводится сообщение о неверных данных

Прецедент П12: Просмотр товаров (Пользователь) Пользователь может просматривать каталог и фильтровать товары.

Описание:
Пользователь открывает раздел каталога товаров
Система отображает список доступных товаров
Пользователь может использовать фильтры для поиска по категориям, цене и другим параметрам
Пользователь может просматривать детали каждого товара

Прецедент П13: Работа с корзиной (Пользователь) Пользователь может добавлять товары в корзину и управлять ею.

Описание:
Пользователь выбирает товар и нажимает кнопку "Добавить в корзину"
Система добавляет товар в корзину
Пользователь может просмотреть содержимое корзины
Пользователь может изменять количество товаров или удалять их из корзины

Прецедент П14: Оформление заказа (Пользователь) Пользователь может создать заказ из товаров в корзине.

Описание:
Пользователь открывает корзину и нажимает кнопку "Оформить заказ"
Система запрашивает адрес доставки и способ оплаты
Пользователь вводит необходимые данные
Система проверяет корректность введенной информации
При успешной проверке создается заказ
Система подтверждает успешное оформление заказа




















3 РЕАЛИЗАЦИЯ СИСТЕМЫ

После проектирования системы я приступил к её разработке.

Для разработки приложения была выбрана платформа .NET с использованием языка C# и технологии Windows Presentation Foundation (WPF) для создания пользовательского интерфейса. Данный выбор обусловлен широкими возможностями этих технологий для создания современных desktop-приложений с богатым пользовательским интерфейсом.

Для хранения данных используется локальная база данных, реализованная с помощью Entity Framework Core. База данных содержит следующие основные таблицы:

1. User - хранит информацию о пользователях системы:
   - Id: уникальный идентификатор пользователя (PK)
   - Username: имя пользователя
   - Email: электронная почта
   - PasswordHash: хэш пароля
   - Role: роль (Customer/Admin)
   - IsBlocked: флаг блокировки
   - LastLoginDate: дата последнего входа
   - RegistrationDate: дата регистрации

2. Product - каталог товаров:
   - Id: уникальный идентификатор товара (PK)
   - Name: название товара
   - Description: описание
   - Price: цена
   - ImageUrl: путь к изображению
   - CategoryId: идентификатор категории (FK)
   - StockQuantity: количество на складе

3. Category - категории товаров:
   - Id: уникальный идентификатор категории (PK)
   - Name: название категории
   - Description: описание
   - Products: связанные товары

4. Order - заказы:
   - Id: уникальный идентификатор заказа (PK)
   - UserId: идентификатор пользователя (FK)
   - OrderDate: дата заказа
   - Status: статус заказа
   - TotalAmount: общая сумма
   - DeliveryAddress: адрес доставки

5. OrderItem - товары в заказе:
   - Id: уникальный идентификатор (PK)
   - OrderId: идентификатор заказа (FK)
   - ProductId: идентификатор товара (FK)
   - Quantity: количество
   - Price: цена на момент заказа

6. Cart - корзина покупок:
   - Id: уникальный идентификатор (PK)
   - UserId: идентификатор пользователя (FK)
   - ProductId: идентификатор товара (FK)
   - Quantity: количество
   - DateAdded: дата добавления

Схема базы данных представлена на рисунке 2.
 
Рисунок 2 – Схема Базы данных
После создания базы данных и настройки Entity Framework я приступил к разработке пользовательского интерфейса приложения.

Для разработки интерфейса использовался XAML - декларативный язык разметки. Реализация интерфейса началась с разработки макета главной формы, которая представлена на рисунке 3. Основные цвета интерфейса – #FFB9CAB5 и #FF9CC591, основной шрифт – Segoe UI. Такое цветовое решение обеспечивает хорошую читаемость и комфортную работу с приложением.
 
Макета интерфейса - Рисунок 3
Главной целью при создании макетов было отсутствие в интерфейсе лишних элементов, препятствующих лёгкому восприятию содержимого страниц. Все элементы управления логически сгруппированы и имеют интуитивно понятное расположение.

После реализации интерфейса я приступила к разработке функционала приложения.

Программа разработана для двух типов пользователей: администратор и обычный пользователь. Администратор имеет полный доступ к управлению каталогом товаров, может добавлять, редактировать и удалять товары, 
а также имеет доступ к статистике и отчетам по продажам.

Пользователь может просматривать каталог товаров, добавлять их в корзину и оформлять заказы. Система автоматически отслеживает наличие товаров на складе и обновляет информацию о количестве при каждой покупке.

Первое, что встречает пользователя при входе в программу - это форма авторизации. Продолжить работу в программе без авторизации невозможно, поэтому необходимо ввести логин и пароль. Помимо полей для ввода логина и пароля на форме также присутствует возможность регистрации нового пользователя.

После входа под учетной записью администратора открывается форма управления каталогом товаров. Администратор может просматривать, добавлять, редактировать и удалять товары, а также создавать отчеты о продажах и популярных товарах.

При входе с правами обычного пользователя открывается главное окно программы с возможностью просмотра каталога и работы с корзиной. Пользователь может выбирать товары, добавлять их в корзину и оформлять заказы. Система автоматически проверяет наличие товаров и обновляет информацию о количестве.

3.1 Используемые технологии:
- .NET Framework
- Windows Presentation Foundation (WPF)
- Entity Framework Core
- MS SQL Server
- XAML для пользовательского интерфейса

3.2 Основные классы и компоненты:
- Models: User, Product, Category, Order, OrderItem, CartItem
- Services: UserService, ProductService, OrderService
- Windows: MainWindow, LoginWindow, CatalogWindow
- Data: ApplicationDbContext

4 ОПИСАНИЕ ТЕСТИРОВАНИЯ СИСТЕМЫ

Тестирование интернет-магазина электроники DNS проводилось с целью проверки его функциональности, надежности и безопасности. В ходе тестирования были осуществлены проверки различных аспектов приложения, включая ввод и обработку данных, мониторинг, отчетность, безопасность и совместимость.
Тестирование ввода и обработки данных:
- Проверка корректности процесса ввода данных о товарах
- Проверка правильности обработки данных о товарах, включая их названия, категории, характеристики и цены
- Проверка работы механизмов редактирования и удаления данных
Тестирование мониторинга и отчетности:
- Проверка корректности отображения информации о товарах
- Проверка генерации отчетов о продажах и популярных товарах
- Проверка уведомлений о наличии товаров и статусе заказов
Тестирование безопасности данных:
- Проверка аутентификации пользователей и контроля доступа к информации о товарах и заказах
- Тестирование защиты персональных данных пользователей
- Проверка безопасности платежных операций
Тестирование производительности:
- Проверка скорости загрузки приложения и отображения каталога товаров
- Проверка стабильности работы приложения при одновременной работе с большим объемом данных
- Проверка эффективности поиска товаров по различным критериям
Тестирование совместимости:
- Проверка совместимости приложения с различными устройствами и операционными системами
- Тестирование корректного отображения интерфейса на разных разрешениях экрана
Тестирование интерфейса пользователя:
- Проверка интуитивной понятности интерфейса магазина
- Оценка удобства навигации по каталогу и корзине
- Проверка соответствия дизайна и оформления стандартам пользовательского опыта
Тестирование восстановления после сбоев:
- Проверка возможности восстановления данных о заказах и товарах после сбоев
- Тестирование резервного копирования и восстановления базы данных
- Проверка сохранения состояния корзины пользователя
Тестирование масштабируемости:
- Оценка способности магазина обрабатывать рост числа товаров и заказов
- Проверка эффективности работы при увеличении числа одновременных пользователей
- Тестирование производительности системы при пиковых нагрузках
Тестирование согласованности данных:
- Проверка согласованности информации о товарах между каталогом и базой данных
- Тестирование корректного обновления остатков товаров после оформления заказов
- Проверка актуальности цен и скидок
Тестирование обновлений и дополнений:
- Проверка процесса обновления приложения с сохранением данных пользователей
- Тестирование новых функций каталога и корзины
- Проверка совместимости с существующими данными после обновлений
В результате проведенного тестирования подтверждена корректная работа интернет-магазина электроники DNS. Обеспечена надежность,

5 РУКОВОДСТВО ОПЕРАТОРУ

5.1 Общая информация

Приложение DNS предназначено для управления каталогом электронных товаров и обработки заказов клиентов.

Для использования приложения в соответствии с назначением необходимо следующее оборудование:
- ОС: Microsoft Windows 10/11;
- CPU: Intel Core i3 или выше;
- RAM: 4ГБ или более;
- GPU: Интегрированная графика или выше;
- DirectX: 11;
- ROM: 500МБ свободного места.

Порядок проверки работоспособности:
- Запустите приложение DNS
- Если после запуска появилась форма авторизации – программа загрузилась и работает успешно.

Для использования приложения пользователю необходимо владеть первоначальными навыками работы на компьютере.

5.2 Авторизация

Алгоритм действий при авторизации:
- Войдя в приложение для начала, нужно ввести данные в поля чтобы начать работу, если у вас отсутствуют данные вы можете зарегистрироваться (рисунок 4).

 
Рисунок 4 – Регистрация
- Заполните поля логина и пароля и нажмите на кнопку "войти" (рисунок 5)
 
форма авторизации с заполненными полями - Рисунок 5

- Если после нажатия на кнопку "войти" появилась главная форма – вход произведён успешно.

Алгоритм действий при регистрации:
- Нажмите на кнопку "Зарегистрироваться" на главной форме, всплывающей сразу после открытия приложения.
- В открывшемся окне, введите данные для регистрации (рисунок 6).
 
окно регистрации - Рисунок 6

- После нажатия на кнопку "Зарегистрироваться" вы переходите на главную форму.
- Если же при попытке зарегистрироваться вам приходит уведомление об ошибке, проверьте заполнили вы все поля.
- Если вы уверены в правильности ввода данных и то что вы все заполнили – нажмите на кнопку "ОК".
- Если после нажатия на кнопку "ОК" появилась главная форма – регистрация успешна.

5.3 Основной функционал

- Использование главной формы для работы с товарами и заказами (рисунок 8).
 

главная формы - Рисунок 8

Главная форма предоставляет доступ к следующим функциям:
- Просмотр каталога товаров с указанием: названия, категории, описания и цены
- Добавление товаров в корзину
- Оформление заказов
- Управление корзиной покупок
- Просмотр истории заказов

При нажатии на категорию товаров открывается окно с подробной информацией о товарах данной категории.

При вводе в поле поиска какую-либо букву и нажатию на кнопку "Поиск по названию" в таблице выводятся товары, название которых начинается на эту букву.

При вводе в поле поиска какую-либо букву и нажатию на кнопку "Поиск по категории" в таблице выводятся товары, категория которых начинается на эту букву.

- Работа с корзиной (рисунок 9).
 
форма корзины - Рисунок 9

В корзине доступны следующие действия:
- Просмотр добавленных товаров
- Изменение количества товаров
- Удаление товаров из корзины
- Расчет общей стоимости
- Оформление заказа

- Оформление заказа (рисунок 10).
 
форма оформления заказа - Рисунок 10

При оформлении заказа необходимо:
- Указать адрес доставки
- Выбрать способ оплаты
- Проверить состав заказа
- Подтвердить заказ

5.4 Панель администратора

Для администраторов доступны дополнительные функции:
- Управление каталогом товаров (добавление, редактирование, удаление)
- Управление категориями товаров
- Просмотр и обработка заказов
- Просмотр статистики продаж
- Управление пользователями

- Управление товарами (рисунок 11).
 
панель управления товарами - Рисунок 11

При работе с товарами администратор может:
- Добавлять новые товары
- Редактировать информацию о существующих товарах
- Удалять товары
- Управлять наличием товаров
- Устанавливать цены и скидки

- Управление заказами (рисунок 12).
 
панель управления заказами - Рисунок 12

При работе с заказами администратор может:
- Просматривать список всех заказов
- Изменять статус заказов
- Просматривать детали заказов
- Формировать отчеты по продажам









ЗАКЛЮЧЕНИЕ
Основной целью курсового проектирования являлась разработка приложения для управления ассортиментом и продажами в магазине электроники, соответствующего современным требованиям пользователей.
По ходу реализации поставленной цели были решены следующие задачи:
Изучена предметная область приложения для управления ассортиментом электроники;
Определён состав пользователей и их функционал;
Определены входные данные и структурированы их;
Создана база данных для хранения информации о пользователях, товарах и заказах;
Разработан интуитивно понятный интерфейс;
Разработан функционал для работы с товарами и заказами;
Приложение протестировано для обеспечения его стабильной работы.
В результате решения всех задач получился проект приложения для управления ассортиментом электроники и обработки заказов, полностью соответствующий ожиданиям пользователей и реализующий весь необходимый интерфейс.
Результатом выполнения курсового проекта является полностью функционирующее приложение для управления магазином электроники, которое позволяет пользователям легко находить и заказывать товары.
При разработке модуля использовались следующие программы и технологии:
Visual Studio 2022;
.NET Framework;
Entity Framework Core;
WPF;
SQL Server;
За время работы над разработкой программного модуля были улучшены и закреплены навыки разработки приложений на платформе .NET с использованием C# и работы с SQL Server.
Разработанное приложение является полностью законченным программным продуктом. Программа ориентирована на рядового пользователя, не обладающего специальными знаниями в области электроники, но желающего приобрести необходимые устройства и аксессуары.


























СПИСОК ИСПОЛЬЗОВАННЫХ ИСТОЧНИКОВ
1. ГОСТ 34.60289. Комплекс стандартов на автоматизированные системы. Техническое задание на создание автоматизированной системы : национальный стандарт Российской Федерации : издание официальное : разработан и внесем Государственным комитетом СССР по стандартам Министерством приборостроения, средств автоматизации и систем управления СССР : дата введения 01.01.90. / Утвержден и введен в действие Постановлением Государственного комитета СССР по стандартам от 24.03.89 № 661
2. ГОСТ РД 5034.69890. Методические указания. Информационная технология. Автоматизированные системы. Требования к содержанию документов : национальный стандарт Российской Федерации : издание официальное : Утверждены Постановлением Государственного комитета СССР по управлению качеством продукции и стандартам от 27 декабря 1990 г. N 3380 : дата введения 1 января 1992 года / Разработан и внесен Министерством электротехнической промышленности и приборостроения СССР.
3. Албахари, Д. «C# 12 и .NET 8. Современная разработка» / Д. Албахари, Б. Албахари. – Санкт-Петербург : Питер, 2024. – 1088 с. – ISBN: 9785446119356.
4. Рихтер, Д. «CLR via C#. Программирование на платформе Microsoft .NET Framework» / Д. Рихтер. – Санкт-Петербург : Питер, 2023. – 896 с. – ISBN: 9785446107980.
5. Троелсен, Э. «Язык программирования C# и платформа .NET 7» / Э. Троелсен, Ф. Джепикс. – Москва : Диалектика, 2023. – 1328 с. – ISBN: 9785907392477.
6. Фримен, А. «ASP.NET Core 7 для профессионалов» / А. Фримен. – Москва : Вильямс, 2023. – 1008 с. – ISBN: 9785907392307.
7. Мартин, Р. «Чистая архитектура. Искусство разработки программного обеспечения» / Р. Мартин. – Санкт-Петербург : Питер, 2024. – 352 с. – ISBN: 9785446107728.
8. Фаулер, М. «Архитектура корпоративных программных приложений» / М. Фаулер. – Москва : Вильямс, 2024. – 544 с. – ISBN: 9785907203440.
9. Макконнелл, С. «Совершенный код. Мастер-класс» / С. Макконнелл. – Санкт-Петербург : БХВ-Петербург, 2023. – 896 с. – ISBN: 9785977507967.
10. Скит, Д. «C# для профессионалов. Тонкости программирования» / Д. Скит. – Москва : Вильямс, 2024. – 608 с. – ISBN: 9785907203587.
11. Петруцос, Д. «Разработка приложений баз данных в Visual Studio 2022» / Д. Петруцос. – Москва : Диалектика, 2023. – 912 с. – ISBN: 9785907392491.
12. Гамма, Э. «Паттерны проектирования» / Э. Гамма, Р. Хелм, Р. Джонсон, Д. Влиссидес. – Санкт-Петербург : Питер, 2023. – 448 с. – ISBN: 9785446115235.
13. Прайс, М. «C# 11 и .NET 7. Разработка и оптимизация» / М. Прайс. – Санкт-Петербург : Питер, 2023. – 640 с. – ISBN: 9785446117000.
14. Бейтс, Б. «Паттерны проектирования. Новый подход к объектно-ориентированному анализу и проектированию» / Б. Бейтс, К. Сьерра. – Москва : Диалектика, 2023. – 432 с. – ISBN: 9785907392545.
15. Сандерсон, С. «ASP.NET Core. Разработка приложений» / С. Сандерсон. – Санкт-Петербург : Питер, 2023. – 720 с. – ISBN: 9785446116386.















ПРИЛОЖЕНИЕ А
Код для регистрации в системе

using System;
using System.Windows;
using System.Windows.Controls;
using DNS.Models;
using DNS.Services;

namespace DNS.Views
{
    public partial class RegistrationWindow : Window
    {
        private readonly UserService _userService;

        public RegistrationWindow()
        {
            InitializeComponent();
            _userService = new UserService();
        }

        private async void RegisterButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var user = new User
                {
                    Login = loginTextBox.Text,
                    Email = emailTextBox.Text,
                    Password = passwordBox.Password,
                    Role = "Customer",
                    IsActive = true,
                    RegistrationDate = DateTime.Now
                };

                await _userService.RegisterUser(user);
                MessageBox.Show("Регистрация успешна!");
                DialogResult = true;
                Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Ошибка при регистрации: {ex.Message}");
            }
        }
    }
}













ПРИЛОЖЕНИЕ Б
Код для авторизации в системе

using System;
using System.Windows;
using DNS.Services;

namespace DNS.Views
{
    public partial class LoginWindow : Window
    {
        private readonly AuthService _authService;

        public LoginWindow()
        {
            InitializeComponent();
            _authService = new AuthService();
        }

        private async void LoginButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var success = await _authService.Login(
                    loginTextBox.Text,
                    passwordBox.Password
                );

                if (success)
                {
                    var mainWindow = new MainWindow();
                    mainWindow.Show();
                    Close();
                }
                else
                {
                    MessageBox.Show("Неверный логин или пароль");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Ошибка при входе: {ex.Message}");
            }
        }
    }
}














ПРИЛОЖЕНИЕ В
Код для работы с каталогом товаров

using System.Collections.ObjectModel;
using System.Windows;
using DNS.Models;
using DNS.Services;

namespace DNS.Views
{
    public partial class CatalogWindow : Window
    {
        private readonly ProductService _productService;
        public ObservableCollection<Product> Products { get; set; }

        public CatalogWindow()
        {
            InitializeComponent();
            _productService = new ProductService();
            LoadProducts();
        }

        private async void LoadProducts()
        {
            var products = await _productService.GetAllProducts();
            Products = new ObservableCollection<Product>(products);
            DataContext = this;
        }

        private void SearchButton_Click(object sender, RoutedEventArgs e)
        {
            var searchText = searchTextBox.Text.ToLower();
            var filteredProducts = Products.Where(p => 
                p.Name.ToLower().Contains(searchText) || 
                p.Category.Name.ToLower().Contains(searchText)
            );
            productsListView.ItemsSource = filteredProducts;
        }

        private void AddToCart_Click(object sender, RoutedEventArgs e)
        {
            if (productsListView.SelectedItem is Product product)
            {
                var cartService = new CartService();
                cartService.AddToCart(product);
                MessageBox.Show("Товар добавлен в корзину!");
            }
        }
    }
}










ПРИЛОЖЕНИЕ Г
Код для работы с корзиной

using System;
using System.Collections.ObjectModel;
using System.Windows;
using DNS.Models;
using DNS.Services;

namespace DNS.Views
{
    public partial class CartWindow : Window
    {
        private readonly CartService _cartService;
        public ObservableCollection<CartItem> CartItems { get; set; }
        public decimal TotalAmount => CartItems?.Sum(i => i.Price * i.Quantity) ?? 0;

        public CartWindow()
        {
            InitializeComponent();
            _cartService = new CartService();
            LoadCartItems();
        }

        private async void LoadCartItems()
        {
            var items = await _cartService.GetCartItems();
            CartItems = new ObservableCollection<CartItem>(items);
            DataContext = this;
        }

        private void UpdateQuantity_Click(object sender, RoutedEventArgs e)
        {
            if (sender is Button button && button.DataContext is CartItem item)
            {
                _cartService.UpdateQuantity(item.Id, item.Quantity);
                totalAmountText.Text = TotalAmount.ToString("C");
            }
        }

        private async void Checkout_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var order = new Order
                {
                    UserId = App.CurrentUser.Id,
                    OrderDate = DateTime.Now,
                    Status = "New",
                    TotalAmount = TotalAmount,
                    Items = CartItems.Select(i => new OrderItem
                    {
                        ProductId = i.ProductId,
                        Quantity = i.Quantity,
                        Price = i.Price
                    }).ToList()
                };

                await _cartService.CreateOrder(order);
                MessageBox.Show("Заказ успешно оформлен!");
                CartItems.Clear();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Ошибка при оформлении заказа: {ex.Message}");
            }
        }
    }
}





















ПРИЛОЖЕНИЕ Д
Код для оформления заказов

using System;
using System.Collections.ObjectModel;
using System.Windows;
using DNS.Models;
using DNS.Services;

namespace DNS.Views
{
    public partial class OrderWindow : Window
    {
        private readonly OrderService _orderService;
        public ObservableCollection<Order> Orders { get; set; }

        public OrderWindow()
        {
            InitializeComponent();
            _orderService = new OrderService();
            LoadOrders();
        }

        private async void LoadOrders()
        {
            var orders = await _orderService.GetUserOrders(App.CurrentUser.Id);
            Orders = new ObservableCollection<Order>(orders);
            DataContext = this;
        }

        private void ViewOrderDetails_Click(object sender, RoutedEventArgs e)
        {
            if (ordersListView.SelectedItem is Order order)
            {
                var detailsWindow = new OrderDetailsWindow(order);
                detailsWindow.ShowDialog();
            }
        }

        private async void CancelOrder_Click(object sender, RoutedEventArgs e)
        {
            if (ordersListView.SelectedItem is Order order)
            {
                try
                {
                    await _orderService.CancelOrder(order.Id);
                    order.Status = "Cancelled";
                    MessageBox.Show("Заказ отменен");
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Ошибка при отмене заказа: {ex.Message}");
                }
            }
        }
    }
}



ПРИЛОЖЕНИЕ Е
Код для управления профилем пользователя

using System;
using System.Windows;
using DNS.Models;
using DNS.Services;

namespace DNS.Views
{
    public partial class ProfileWindow : Window
    {
        private readonly UserService _userService;
        private User _currentUser;

        public ProfileWindow()
        {
            InitializeComponent();
            _userService = new UserService();
            LoadUserProfile();
        }

        private async void LoadUserProfile()
        {
            _currentUser = await _userService.GetUserById(App.CurrentUser.Id);
            DataContext = _currentUser;
        }

        private async void SaveProfile_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                _currentUser.Email = emailTextBox.Text;
                if (!string.IsNullOrEmpty(newPasswordBox.Password))
                {
                    _currentUser.Password = newPasswordBox.Password;
                }

                await _userService.UpdateUser(_currentUser);
                MessageBox.Show("Профиль успешно обновлен!");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Ошибка при обновлении профиля: {ex.Message}");
            }
        }
    }
}












ПРИЛОЖЕНИЕ Ж
Код для администрирования системы

using System;
using System.Collections.ObjectModel;
using System.Windows;
using DNS.Models;
using DNS.Services;

namespace DNS.Views
{
    public partial class AdminWindow : Window
    {
        private readonly AdminService _adminService;
        public ObservableCollection<Product> Products { get; set; }
        public ObservableCollection<Category> Categories { get; set; }
        public ObservableCollection<Order> Orders { get; set; }

        public AdminWindow()
        {
            InitializeComponent();
            _adminService = new AdminService();
            LoadData();
        }

        private async void LoadData()
        {
            var products = await _adminService.GetAllProducts();
            Products = new ObservableCollection<Product>(products);

            var categories = await _adminService.GetAllCategories();
            Categories = new ObservableCollection<Category>(categories);

            var orders = await _adminService.GetAllOrders();
            Orders = new ObservableCollection<Order>(orders);

            DataContext = this;
        }

        private async void AddProduct_Click(object sender, RoutedEventArgs e)
        {
            var product = new Product
            {
                Name = nameTextBox.Text,
                Description = descriptionTextBox.Text,
                Price = decimal.Parse(priceTextBox.Text),
                CategoryId = ((Category)categoryComboBox.SelectedItem).Id,
                StockQuantity = int.Parse(stockTextBox.Text),
                ImageUrl = imageUrlTextBox.Text
            };

            try
            {
                await _adminService.AddProduct(product);
                Products.Add(product);
                MessageBox.Show("Товар успешно добавлен!");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Ошибка при добавлении товара: {ex.Message}");
            }
        }

        private async void UpdateOrderStatus_Click(object sender, RoutedEventArgs e)
        {
            if (ordersListView.SelectedItem is Order order)
            {
                try
                {
                    order.Status = statusComboBox.Text;
                    await _adminService.UpdateOrder(order);
                    MessageBox.Show("Статус заказа обновлен!");
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Ошибка при обновлении статуса: {ex.Message}");
                }
            }
        }
    }
}
