3 РЕАЛИЗАЦИЯ СИСТЕМЫ

3.1 Архитектура приложения

Приложение DNS разработано с использованием паттерна MVVM (Model-View-ViewModel), что обеспечивает четкое разделение логики и представления. Структура проекта включает следующие основные компоненты:

1. Models - содержит классы моделей данных:
   - User.cs - модель пользователя
   - Product.cs - модель товара
   - Category.cs - модель категории
   - Order.cs - модель заказа
   - OrderItem.cs - модель элемента заказа
   - CartItem.cs - модель элемента корзины

2. Views - содержит окна и элементы интерфейса:
   - MainWindow.xaml - главное окно приложения
   - Множество дополнительных представлений для различных функций

3. ViewModels - содержит модели представлений:
   - Реализует связывание данных между моделями и представлениями
   - Обеспечивает обработку пользовательских команд

4. Services - содержит бизнес-логику:
   - Обработка данных
   - Взаимодействие с базой данных
   - Аутентификация и авторизация

5. Data - компоненты для работы с базой данных:
   - Контекст базы данных
   - Миграции
   - Конфигурации сущностей

3.2 Технологии и инструменты

В процессе разработки использовались следующие технологии:

1. Microsoft Visual Studio 2022 Community:
   - Основная среда разработки
   - Инструменты отладки и тестирования
   - Система контроля версий

2. Windows Presentation Foundation (WPF):
   - Создание пользовательского интерфейса
   - Использование XAML для разметки
   - Привязка данных
   - Стилизация элементов управления

3. Entity Framework Core:
   - ORM для работы с базой данных
   - Миграции для управления схемой БД
   - LINQ для запросов к данным

4. Material Design:
   - Современный дизайн интерфейса
   - Готовые компоненты UI
   - Адаптивная верстка

3.3 Особенности реализации

1. Пользовательский интерфейс:
   - Использование шрифта Montserrat
   - Цветовая схема: основной цвет фона #2H2H2H, дополнительный #42432С, акцентный #А4С991
   - Адаптивный дизайн
   - Интуитивно понятная навигация

2. База данных:
   - SQL Server для хранения данных
   - Нормализованная структура таблиц
   - Индексация для оптимизации запросов
   - Внешние ключи для обеспечения целостности данных

3. Безопасность:
   - Хеширование паролей
   - Проверка прав доступа
   - Валидация пользовательского ввода
   - Защита от SQL-инъекций

4. Оптимизация:
   - Асинхронные операции для тяжелых задач
   - Кэширование часто используемых данных
   - Ленивая загрузка для больших наборов данных
   - Эффективная работа с памятью

3.4 Основные функциональные модули

1. Модуль авторизации:
   - Регистрация новых пользователей
   - Вход в систему
   - Восстановление пароля
   - Управление профилем

2. Модуль каталога:
   - Просмотр товаров
   - Фильтрация и поиск
   - Сортировка по различным параметрам
   - Детальная информация о товаре

3. Модуль корзины:
   - Добавление товаров
   - Изменение количества
   - Расчет стоимости
   - Оформление заказа

4. Модуль заказов:
   - История заказов
   - Статус выполнения
   - Детали заказа
   - Отмена заказа

5. Административный модуль:
   - Управление товарами
   - Управление пользователями
   - Просмотр статистики
   - Настройка системы
